using System;
using System.Security.Cryptography;
using System.IO;
using System.Text;
using System.Xml;
using System.Reflection;

	/// <summary>
	/// Summary description for SecuirtyManager.
	/// </summary>
	public class SecurityManager
	{
		private RSAParameters RSAKeyInfo;
		private static RSACryptoServiceProvider RSA=null;
		private string modStr="";
		private string expStr="";
		private static string PUBLIC_KEY;
		
		/// <summary>
		/// Reads the Public key file and Loads the RSAParameters with the 
		/// Modulous and Exponent data.
		/// </summary>
		public SecurityManager()
		{
            string appFolder = Path.GetDirectoryName(Assembly.GetExecutingAssembly().GetName().CodeBase);
            string filePath = Path.Combine(appFolder, "netpublic.key");
            PUBLIC_KEY = filePath; //Generated by Java Program
			RSAKeyInfo = new RSAParameters();
			RSA = new RSACryptoServiceProvider();

			readKey();
		}
		/// <summary>
		/// Reads the key from the XML formatted file.
		/// </summary>
		private void readKey()
		{
			// read the XML formated public key 
			try
			{
			
				XmlTextReader reader = new XmlTextReader(PUBLIC_KEY);
				/*while(reader.Read())
				{
					if (reader.NodeType == XmlNodeType.Element)
					{
						if(reader.Name=="Modulus")
						{
							reader.Read();
							modStr= reader.Value;
						}
						else if(reader.Name=="Exponent")
						{
							reader.Read();
							expStr= reader.Value;
						}
					}
				}
				if(modStr.Equals("") ||expStr.Equals(""))
				{
					//throw exception
					throw new Exception("Invalid public key");
				}*/
                modStr = "6cVie4FPvN5eKZmfRfH5+K8NbJQhAKpLVgZrYEeij9yN9/fpD6nc+DzwyzVm2DgzAVLyQc3JFx5l&#13;\nj/DSB7Hphw==";
                expStr = "AQAB";
				RSAKeyInfo.Modulus = Convert.FromBase64String(modStr);
				RSAKeyInfo.Exponent = Convert.FromBase64String(expStr);
				RSA.ImportParameters(RSAKeyInfo);
			}
			catch(Exception e)
			{
				throw new Exception("Invalid Public Key.");
			}
		}
		/// <summary>
		/// Verifies the signature for a given data.
		/// </summary>
		/// <param name="signature">Signature data in Base64</param>
		/// <param name="signedData">Original data in BASE64</param>
		/// <returns>True if signature is valid else False</returns>
		public bool verifySignature(string signature,string signedData)
		{
			byte[] sign = Convert.FromBase64String(signature);
			return verifySignature(sign,signedData);
		}
		/// <summary>
		/// Verifies the signature for a given data.
		/// </summary>
		/// <param name="signature">The signature </param>
		/// <param name="signedData">Original data in Base64</param>
		/// <returns></returns>
		public bool verifySignature(byte[] signature , string signedData)
		{
			
			
			byte[] hash = Convert.FromBase64String(signedData);
			try
			{
				if(RSA.VerifyData(hash,"SHA1",signature))
				{
					//Console.WriteLine("The signature is valid.");
					return true;
				}
				else
				{
					//Console.WriteLine("The signature is not valid.");
					return false;
				}
			}
			catch(Exception e)	
			{
				Console.WriteLine(e.Message);
				return false;
			}
		}
		/// <summary>
		/// Decrypts the data. from Base64 string
		/// </summary>
		/// <param name="encrypted">Base64EncodedData</param>
		/// <returns>Data</returns>
		public static string decryptData(string encrypted)
		{
			return Encoding.GetEncoding("windows-1256").GetString(Convert.FromBase64String(encrypted), 0, encrypted.Length);
		}

		public string readFile(string file)
		{
			string finalStr="";
			try 
			{
				// Create an instance of StreamReader to read from a file.
				// The using statement also closes the StreamReader.
				using (StreamReader sr = new StreamReader(file)) 
				{
					String line;
					// Read and display lines from the file until the end of 
					// the file is reached.
					while ((line = sr.ReadLine()) != null) 
					{
						//Console.WriteLine(line);	
						finalStr = finalStr+line;
					}
					return finalStr;
				}
			}
			catch (Exception e) 
			{
				// Let the user know what went wrong.
				Console.WriteLine("The file could not be read:");
				Console.WriteLine(e.Message);
			}
			return null;
		}

		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		//[STAThread]
		public static void Test() 
		{	
			SecurityManager sm = new SecurityManager();
			//string endata = sm.readFile("c:\\data.dat");
			//string ensignature = sm.readFile("c:\\signature.dat");
			
            string endata = "VGhpcyBkYXRhIHdpbGwgYmUgc2lnbmVkIC4uLi4geW91IGNhbiBwcm92aWRlIGFueSBkYXRhIGhlcmUu";
            string ensignature = "i3iGrMZXEqblGPEA1U07MqqUZ0w8HAKqASh7T7xxYbzIYtZBkUun6+nqxlC1pp2vQ4dZPekvirAl7uOS1YQrLw==";

			bool result = sm.verifySignature(ensignature,endata);

			Console.WriteLine("Data is validate: "+result);
			Console.ReadLine();
		}
	}
