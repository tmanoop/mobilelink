/* 
 * Program : Server.java
 * 
 * Description :
 * 
 * This is a Server program that displays messages sent by Clients processes and sends a 
 * response "Message Recieved" to the corresponding Client Sockets.
 * 
 * Any number of Client Sockets are accepted in a serial fashion. Only one message from a 
 * client is  accpeted. The server process kills itself once a message "kill" (case insensitive) 
 * is recieved from the Client Socket it is currently bound to.
 * 
 * The Client process created by the program Client.java can be handled by this Server.
 *  
 */

import java.net.*;
import java.util.ArrayList;
import java.util.Scanner;
import java.io.*;

public class LCAServer
{
	// Server Object constructor
	@SuppressWarnings("static-access")
	public LCAServer()
	{
		int size = 10;
		ArrayList<User> mobileUsers = new ArrayList<User>();
		int[][] M = new int[size][size];
		LCA lca = new LCA(mobileUsers,M);
		try
		{
			int clientNumber = 0;
			// Create a Server Socket at local host on the Port 8000
			ServerSocket serverSocket = new ServerSocket(8000);
			System.out.println("This is a Server at ");
			
			// Notify the IP Address and Port Number to the user
			System.out.println("IP Address	: " +((serverSocket.getInetAddress()).getLocalHost()).getHostAddress());
			System.out.println("Port Number	: 8000");

			// Accept clients one after another
			while(true)
			{

				System.out.println("\nWaiting for a Client...");

				// Accept a Client Socket
				Socket clientSocket=serverSocket.accept();
				String clientsMessage;

				// Create an input stream to read a message from the Client Socket
				BufferedReader inputStream= new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
				
				// Create an output stream to send response to the Client Socket
				PrintStream outputStream = new PrintStream(clientSocket.getOutputStream());
				
				// Read message sent by client
				clientsMessage = inputStream.readLine();

				// Check if the message is not "kill" and act accordingly
				if(!clientsMessage.equalsIgnoreCase("kill"))
				{
					System.out.println("Message from Client " + clientNumber + ": " + clientsMessage);
					if(clientsMessage.contains("My Location")){
						String msg = "claimer's location request recieved: ";
						System.out.println(msg);
						//mobileUsers.get(c.id).trustScore = mobileUsers.get(c.id).trustScore + 0.1;
						//then send to LBS that claimer location is correct
						//Client lcaClient = new Client("LBS IP",msg,true);
					}
					
					//handle claims
					if(clientsMessage.contains("claim")){
						User c = new User();
						//set user info in this claimer instance
						//claimer msg example of clientsMessage = claim: 01,12,999,0
						Scanner s = new Scanner(clientsMessage).useDelimiter(",");
						c.id = s.nextInt();
						c.location = s.nextInt();
						c.serviceID = s.nextInt();
						c.time = s.nextInt();
						if(lca.decisionProcess(c) == 1)
						{
							String msg = "LCA Decision: Claim Approved for user "+c.id;
							System.out.println(msg);
							//mobileUsers.get(c.id).trustScore = mobileUsers.get(c.id).trustScore + 0.1;
							//then send to LBS that claimer location is correct
							Client lcaClient = new Client("LBS IP",msg,true);
						} else
						{
							String msg = "LCA Decision: Claim Rejected for user "+c.id;
							System.out.println(msg);
							//his claim is rejected
							Client lcaClient = new Client("LBS IP",msg,true);
						}
						//flush the verifiers for this claimer
						mobileUsers.get(c.id).V.clear();
					}
					
					//handle verifications
					if(clientsMessage.contains("verification")){
						//verifier msg example of clientsMessage = verification: claimer id,01,12,999,0
						Scanner s = new Scanner(clientsMessage).useDelimiter(",");
						User claimer = mobileUsers.get(s.nextInt());
						//set user info in this claimer instance
						//claimer msg example of clientsMessage = 01,12,999,0
						User vrfr = new User();
						
						vrfr.id = s.nextInt();
						vrfr.location = s.nextInt();
						vrfr.serviceID = s.nextInt();
						vrfr.time = s.nextInt();
						claimer.V.add(vrfr);
						
					}
					
					// Send response to client
					outputStream.print("Message Recieved...");
					
					outputStream.flush();
					outputStream.close();
					inputStream.close();
				}
				
					// If the message is "kill" 
				else
				{
					System.out.println("Killer Client Connected");

					// Send response to client
					outputStream.print("Server process being killed...");
					System.out.println("Server process being killed...");

					outputStream.flush();
					outputStream.close();
					inputStream.close();

					serverSocket.close();

					System.exit(0);
				}
			}	
		}

		// Catch any exception in execution of the above statements and notify user
		catch(Exception e)
		{
			System.err.println(e);
		}
	}
	
	public static void main(String args[])
	{
	// Create a new Server Object
	new LCAServer();
	}
	
}